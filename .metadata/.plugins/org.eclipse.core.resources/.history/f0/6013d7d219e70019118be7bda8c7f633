from threading import *
from time import *

class Producer:
    def __init__(self):
        self.products=[]
        self.c=Condition()
    
    def produce(self):
        self.c.acquire()
        for i in range(1,5):
            self.products.append("Product"+str(i))
            sleep(1)
            print("Items added")
        self.ordersPlaced=True
        print(self.ordersPlaced)
        

class Consumer:
    def __init__(self,prod):
        self.prod=prod
        
    def consume(self):
        while (self.prod.ordersPlaced==False):
            print("Waiting for the orders")
            sleep(0.2)
        print("Orders shipped",self.prod.products)
        

p=Producer()
c=Consumer(p)

t1=Thread(target=p.produce)
t2=Thread(target=c.consume)

t1.start()
t2.start()