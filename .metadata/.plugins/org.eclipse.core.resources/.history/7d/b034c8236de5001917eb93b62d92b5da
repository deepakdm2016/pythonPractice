from abc import abstractclassmethod,ABC

class BMW(ABC):
    
    def __init__(self,make,model,year):
        self.make=make
        self.model=model
        self.year=year
        
    def start(self):
        print("Starting the car")
    
    def stop(self):
        print("Stopping the car")

    @abstractclassmethod
    def drive(self):
        pass


class ThreeSeries(BMW):
    
    def __init__(self,cruiseControlEnabled,make,model,year):
        BMW.__init__(self, make, model, year)
        self.cruised=cruiseControlEnabled
        
    def overRideDemo(self):
        print("in Three Series")
        
    def start(self):
        print("Button Starting the car")
    
    def stop(self):
        print("Button Stopping the car")

    
    def drive(self):
        Print("Three series is driven")

class FiveSeries(BMW):
    
    def __init__(self,parkingAssistEnabled,make,model,year):
        super().__init__(make,model,year)
        self.parking=parkingAssistEnabled

    def overRideDemo(self):
        print("in Five Series")
        
    def start(self):
        super().start()
        print("Remote Starting the car")
    
    def stop(self):
        print("Remote Stopping the car")
        

        
BT=ThreeSeries("CruiseControlled","BMW-3","BMW-33",2019)
print(BT.make,BT.model,BT.cruised,BT.year)
BT.stop()
BT.start()

FS=FiveSeries("ParkingControlled","BMW-5","BMW-55",2020)
print(FS.make,FS.model,FS.parking,FS.year)
FS.start()
FS.stop()